<?php

/**
 * This file serves as the only entry point of the entire application.
 *
 * When you type a URL like "http://localhost:8080/" in your browser, the part
 * after the domain name (localhost:8080) is the URL path. In this example,
 * the URL path is just "/", which is empty except for the slash.
 *
 * Apache takes this URL path and combines it with the document root (the folder
 * where your website files are stored). For example, if your document root is
 * "/var/www/html", Apache will look in "/var/www/html/".
 *
 * Execute the following command the check the absolute path to the document
 * root:
 *
 *     $ httpd -S | grep "Main DocumentRoot"
 *
 * When a URL points to a directory (ends with "/"), Apache needs to know which
 * file to serve from that directory. By default, it looks for a file named
 * "index.html". This default file is called the "directory index". So in our
 * example "http://localhost:8080/", Apache will try to find and serve:
 * document_root + "/" + "index.html". For example, it can be
 *
 *     /var/www/html/index.html
 *
 * You can change the directory index files looks for by modifying its
 * configuration. To do this:
 *
 * 1. Open Apache's configuration file (often httpd.conf or apache2.conf). You
 *    can find the absolute path to the configuration file with the following
 *    command:
 *
 *        $ httpd -V | grep SERVER_CONFIG_FILE
 *
 * 2. Find the section that looks like this:
 *
 *    <IfModule dir_module>
 *        DirectoryIndex index.html
 *    </IfModule>
 *
 * 3. Change it to include additional files, for example:
 *
 *    <IfModule dir_module>
 *        DirectoryIndex index.html index.php
 *    </IfModule>
 *
 * 4. Save the file and restart the Apache service.
 *
 * With this configuration, Apache will first look for "index.html", and if it
 * doesn't exist, it will then look for "index.php" in the same directory.
 *
 * When Apache finds the index file (or any requested file), it processes it
 * based on the file type:
 *
 * 1. Static files (HTML, CSS, JavaScript, images, etc.): Apache simply reads
 *    the file contents and sends them directly to the browser.
 *
 * 2. PHP files: Apache passes the file to the PHP interpreter, which executes
 *    the PHP code. Any output generated by the PHP code (using echo, print,
 *    etc.) is collected and sent back to the browser.
 *
 * @author James Chen
 */

// Automatically loads PHP classes when they are referenced in the code but
// haven't been manually included yet.
spl_autoload_register(function ($class) {
    $file = __DIR__ . '/' . str_replace('\\', '/', $class) . '.php';

    if (!file_exists($file)) {
        return false;
    }

    require_once $file;
    return true;
});

/** @noinspection PhpForeachOverSingleElementArrayLiteralInspection */
foreach (["common"] as $item) {
    $functionFiles = glob(__DIR__ . '/' . $item . '/*.php');
    foreach ($functionFiles as $functionFile) {
        require_once $functionFile;
    }
}

/**
 * Retrieves configuration settings from a specified configuration file.
 *
 * @param string $name The name of the configuration file (without extension).
 * @return array The configuration settings as an associative array.
 * @throws InvalidArgumentException If the configuration file does not exist.
 * @throws RuntimeException If the configuration file does not return a valid
 * array.
 */
function get_config(string $name): array
{
    $filePath = __DIR__ . "/config/$name.config.php";
    if (!file_exists($filePath)) {
        throw new InvalidArgumentException(
            "Configuration file '$name.config.php' does not exist."
        );
    }

    $config = require $filePath;

    if (!is_array($config)) {
        throw new RuntimeException(
            "Configuration file '$name.config.php' must return an array."
        );
    }

    return $config;
}

use service\AccountService;

$accountService = new AccountService();
var_dump($accountService->getAllAccounts());
